{
  "version": "1.5.0",
  "revision": 46,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "recode23-letters-audio",
      "mod": 1704809950404,
      "parent": "reactive-recode23",
      "code": "/*\n\tWelcome to REACTIVE RECODE 23\n\tan homage to Vera Molnár\n\tEnjoy remixing + live-coding our sketches!\n\t\n\tie., this work:\n\tLettres de ma Mère (Letter from my Mother)\n\t1988\n\tComputer graphic on paper\n\t\n\tcc teddavis.org 2024\n*/\n\nlet credits = { \n    \"student_names\": \"ted.davis\", \n    \"recode_title\": \"Lettres de ma Mère (Letter from my Mother)\", \n    \"recode_year\": 1988, \n    \"recode_medium\": \"computer graphic on paper\", \n    \"recode_url\": \"https://spalterdigital.com/artworks/210/\" \n} \n\nlet notes = [],\n\tnotesCount = 22\n\n\nlet guiSliders = [],\n\tguiBoxes = [],\n\tguiValsOG = [],\n\tguiVals = [],\n\tguiValsInit = true\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight)\n\tnoFill()\n\tstroke(50, 50, 150)\n\tstrokeWeight(2)\n\tstrokeJoin(ROUND)\n\tstrokeCap(ROUND)\n\tangleMode(DEGREES)\n\n\tbuildGUI()\n\tgenNotes()\n\tsetupAudio()\n}\n\nfunction genNotes() {\n\tnotes = []\n\tfor(let i = 0; i < sliderLines.value(); i++) {\n\t\tlet y = map(i, 0, sliderLines.value(), -height * .4, height * .4)\n\t\tnotes.push(new Note(-width * .47, y, sliderDensity.value()))\n\t}\n}\n\nfunction draw() {\n\tif(checkboxAudio.checked()){\n\t\tupdateAudio()\n\t}\n\tbackground(220)\n\ttranslate(width / 2, height / 2)\n\tstrokeWeight(sliderWeight.value())\n\tfor(let n of notes) {\n\t\tn.display()\n\t}\n\n}\n\nconst offset = (arr, offset) => [...arr.slice(offset), ...arr.slice(0, offset)];\n\nclass Note {\n\tconstructor(x, y, res) {\n\t\tthis.x = x //+ random(-1, 1)\n\t\tthis.y = y\n\t\tthis.res = res\n\t\tthis.coords = []\n\t\tthis.genLine()\n\t\tthis.id = notes.length\n\t\tthis.frameCount = notes.length //floor(random(9999))\n\t}\n\n\tgenLine() {\n\t\tfor(let i = 0; i < this.res; i++) {\n\t\t\tif(this.x < width * .45) {\n\t\t\t\tthis.x += random(width / this.res / .2, width / this.res)\n\t\t\t\tthis.yoff = random(5, random(2, height / notesCount / 3))\n\t\t\t\tthis.coords.push(createVector(this.x, -this.yoff))\n\t\t\t\tthis.x -= random(width / this.res, width / this.res)\n\t\t\t\tthis.yoff = random(5, random(2, height / notesCount / 3))\n\t\t\t\tthis.coords.push(createVector(this.x, this.yoff))\n\t\t\t}\n\t\t}\n\t}\n\n\tdisplay() {\n\t\tthis.frameCount++ //=sliderAnimate.value()\n\t\tif(this.frameCount % 3 == 0) {\n\t\t\t// this.coords = offset(this.coords, 1)\n\t\t}\n\t\tpush()\n\t\ttranslate(0, this.y)\n\t\tif(checkboxRotate.checked()) {\n\t\t\trotate(this.frameCount * sliderRotate.value() + this.id * sliderRotate.value() * 100)\n\t\t}\n\t\tbeginShape()\n\t\tfor(var i = 0; i < this.coords.length - 1; i++) {\n\t\t\tlet coord = this.coords[i]\n\t\t\tlet coord2 = this.coords[i + 1]\n\t\t\t// if(coord.dist(coord2) > 50)\n\t\t\tlet offset = 0\n\t\t\tlet a = 0\n\t\t\t\n\t\t\tif(checkboxAudio.checked()){\n\t\t\t\ta += fft[floor(map(i, 0, this.coords.length, 0, fft.length))] * sliderAudio.value()\n\t\t\t\t// a = fft[i%fft.length]\n\t\t\t\ta += waveform[floor(map(i, 0, this.coords.length, 0, waveform.length))]*20 * sliderAudio.value()\n\t\t\t\t// a = waveform[i%waveform.length]*20\n\t\t\t}\n\t\t\t\n\t\t\tif(checkboxOsc.checked()) {\n\t\t\t\toffset = sin(this.frameCount * sliderOsc.value() * 5 + i * sliderOsc.value() * this.res) * 5\n\t\t\t}\n\n\t\t\tif(checkboxRandom.checked()) {\n\t\t\t\toffset += random(-10 * sliderRandom.value(), 10 * sliderRandom.value())\n\t\t\t}\n\t\t\tvertex(coord.x+ offset, coord.y * sliderHeight.value() + offset + a)\n\t\t\t// strokeWeight(random(5))\n\t\t\t// line(coord.x, coord.y, coord2.x, coord2.y)\n\t\t}\n\t\tendShape()\n\t\tpop()\n\t}\n}\n\nlet sliders = []\n\nfunction buildGUI() {\n\tguiHolder = createDiv('').class('gui-holder')\n\tguiBar = createDiv('=== Lettres ===').parent(guiHolder).class('gui-bar').draggable(guiHolder)\n\tguiContent = createDiv('').parent(guiHolder).class('gui-content')\n\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\tcreateDiv('LINES').parent(guiItem).class('gui-label')\n\tsliderLines = createSlider(2, 44, 22, 1).parent(guiItem).class('gui-slider').input(genNotes)\n\tguiSliders.push(sliderLines)\n\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\tcreateDiv('HEIGHT').parent(guiItem).class('gui-label')\n\tsliderHeight = createSlider(0, 10, 1, .001).parent(guiItem).class('gui-slider')\n\tguiSliders.push(sliderHeight)\n\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\tcreateDiv('WEIGHT').parent(guiItem).class('gui-label')\n\tsliderWeight = createSlider(.5, 10, 2, .001).parent(guiItem).class('gui-slider')\n\tguiSliders.push(sliderWeight)\n\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\tcreateDiv('DENSITY').parent(guiItem).class('gui-label')\n\tsliderDensity = createSlider(50, 500, 200, 1).parent(guiItem).class('gui-slider').input(genNotes)\n\tguiSliders.push(sliderDensity)\n\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\tcreateDiv('ROTATE').parent(guiItem).class('gui-label')\n\tcheckboxRotate = createCheckbox('', false).parent(guiItem).class('gui-box')\n\tguiBoxes.push(checkboxRotate)\n\tsliderRotate = createSlider(0, 1, .1, .001).parent(guiItem).class('gui-slider gui-slider-box')\n\tguiSliders.push(sliderRotate)\n\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\tcreateDiv('OSCILLATE').parent(guiItem).class('gui-label')\n\tcheckboxOsc = createCheckbox('', false).parent(guiItem).class('gui-box')\n\tguiBoxes.push(checkboxOsc)\n\tsliderOsc = createSlider(0, 1, .1, .001).parent(guiItem).class('gui-slider gui-slider-box')\n\tguiSliders.push(sliderOsc)\n\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\tcreateDiv('RANDOM').parent(guiItem).class('gui-label')\n\tcheckboxRandom = createCheckbox('', false).parent(guiItem).class('gui-box')\n\tguiBoxes.push(checkboxRandom)\n\tsliderRandom = createSlider(0, 1, .1, .001).parent(guiItem).class('gui-slider gui-slider-box')\n\tguiSliders.push(sliderRandom)\n\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\tcreateDiv('AUDIO').parent(guiItem).class('gui-label')\n\tcheckboxAudio = createCheckbox('', false).parent(guiItem).class('gui-box')\n\tguiBoxes.push(checkboxAudio)\n\tsliderAudio = createSlider(0, 1, .1, .001).parent(guiItem).class('gui-slider gui-slider-box')\n\tguiSliders.push(sliderAudio)\n\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\t// createButton('RESET').parent(guiItem).mousePressed(resetGUI)\n\tcreateButton('RESET')\n\t\t.parent(guiItem)\n\t\t.mousePressed(function() {\n\t\t\tlet c = 0\n\t\t\tfor(let s of guiSliders) {\n\t\t\t\ts.value(guiValsOG[c])\n\t\t\t\tc++\n\t\t\t}\n\t\t\tfor(let cb of guiBoxes) {\n\t\t\t\tcb.checked(false)\n\t\t\t}\n\t\t\tgenNotes()\n\t\t\t// checkboxAudio.checked(false)\n\t\t})\n\n\tcreateButton('RANDOM').parent(guiItem).mousePressed(function() {\n\t\tfor(let s of guiSliders) {\n\t\t\ts.value(random(s.attribute('min'), s.attribute('max')))\n\t\t}\n\t\tfor(let cb of guiBoxes) {\n\t\t\tcb.checked(round(random(1)))\n\t\t}\n\t\tgenNotes()\n\t})\n\n\n\tif(guiValsInit) {\n\t\tfor(let s of guiSliders) {\n\t\t\tguiValsOG.push(s.value())\n\t\t}\n\t}\n\tguiValsInit = false\n\n\tcreateElement('style', `\n\t\t.gui-holder{\n\t\t\tposition:fixed;\n\t\t\tright:25px;\n\t\t\ttop:25px;\n\t\t\tbackground:rgba(0, 0, 0, .5);\n\t\t\twidth:200px;\n\t\t\tcolor:#fff;\n\t\t\tborder:1px solid #fff;\n\t\t\tfont-family:monospace;\n\t\t}\n\t\t*{\n\t\t\toutline:none;\n\t\t}\n\t\t.gui-bar{\n\t\t\tcolor:#fff;\n\t\t\tborder-bottom:1px solid #fff;\n\t\t\tpadding:5px;\n\t\t\ttext-align:center;\n\t\t\tbackground:rgba(0, 0, 0, .5);\n\t\t\tfont-size:12pt;\n\t\t}\n\t\t.gui-content{\n\t\t\t// background:blue;\n\t\t\twidth:100%;\n\t\t\theight:100%;\n\t\t\t\n\t\t}\n\t\t.gui-slider{\n\t\t\twidth:95%;\n\t\t}\n\t\t.gui-box{\n\t\t\tmargin-right:5px;\n\t\t\tfloat:left;\n\t\t}\n\t\t.gui-slider-box{\n\t\t\twidth:80%;\n\t\t}\n\t\t.gui-label{\n\t\t\t\n\t\t}\n\t\t.gui-select{\n\t\t\tmargin: 5px 5px 5px 0px;\n\t\t\tfloat:left;\n\t\t}\n\t\t.gui-item{\n\t\t\tborder-bottom:1px solid #fff;\n\t\t\t// margin-bottom:15px;\n\t\t\tpadding:5px;\n\t\t}\n\t\t.gui-item:hover{\n\t\t\tbackground:#333;\n\t\t\t\n\t\t}\n\t\t.hidden{\n\t\t\tvisibility:hidden;\n\t\t}\n\t\n\t`)\n}\n\n/* AUDIO INIT */\nlet mic, fftRaw, fft = [],\n\twaveform = [],\n\tamp = 0.0,\n\tampStereo = {\n\t\tl: 0.0,\n\t\tr: 0.0\n\t},\n\tampEase = 0.0,\n\tnumBins = 512,\n\tbands = 12;\n\nfunction setupAudio() {\n\tuserStartAudio();\n\tmic = new p5.AudioIn();\n\tmic.start();\n\tfftRaw = new p5.FFT(0.75, numBins);\n\tfftRaw.setInput(mic);\n}\n\nfunction updateAudio() {\n\tfftRaw.analyze();\n\tamp = mic.getLevel() * 1000; // average mixed amplitude\n\tampStereo.l = mic.amplitude.getLevel(0) * 500; // average left amplitude\n\tampStereo.r = mic.amplitude.getLevel(1) * 500; // average right amplitude\n\tampEase = ease(amp, ampEase, 0.075); // smooth 'amp'\n\twaveform = fftRaw.waveform(); // array (-1, 1)\n\tfft = fftRaw.logAverages(fftRaw.getOctaveBands(bands)); // array (0, 255)\n}"
    }
  ]
}