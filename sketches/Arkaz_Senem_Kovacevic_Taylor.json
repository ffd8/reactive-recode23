{
  "version": "1.5.0",
  "revision": 46,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "Arkaz_Senem_Kovacevic_Taylor",
      "mod": 1704808595580,
      "code": "\nlet credits = { \n    \"student_names\": \"Senem Arkaz, Taylor Kovacevic\", \n    \"recode_title\": \"Interruption/Continuation\", \n    \"recode_year\": 1961, \n    \"recode_medium\": \"gouache on board, each 28 x 28cm\", \n    \"recode_url\": \"http://dada.compart-bremen.de/item/artwork/143\" \n}\n\n\n\n\n\n//Tonejs, hydra and midi libraries\nlet libs = [\n\t// \"https://unpkg.com/tone\",\n\t// \"includes/libs/Tone.js\",\n\t'https://unpkg.com/hydra-synth', 'includes/libs/hydra-//synth.js',\n\t\"includes/js/webmidi.min.js\"\n] // do stuff with tone.js\n\n//tonejs start\n// const synth = new Tone.PolySynth().toDestination() // melody\n// let toneLoop\n\n// Tone.Transport.start();\n// //synth.set({\n// \tdetune: -1200\n// })\n\n\n\nlet checkbox \nlet bg = 0\n\n\nlet myButton\nlet myButton2\nlet myButton3\nlet myButton4\nlet myButton5\nlet myButton6\n\n\n\n//tonePlayer requires preload\nfunction preload() {\n\n\t// player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n    \n\n}\n\n\n\nlet papers = []\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\tpg = createGraphics(hc.width, hc.height)\n\t\n\trectMode(CENTER)\n\tangleMode(DEGREES)\n\tbuildGUI()\n\t\n   \n  setupMidi(midiDeviceIn, midiDeviceOut)\n  \n \n  papers.push(new Paper(height/5, -height/5, height/5 *1.15, 1))\n  papers.push(new Paper(-height/5*0.2, -height/5, height/5 *1.1, 2))\n  papers.push(new Paper(-height/5*1.3, -height/5, height/5 *1.05, 3))\n  papers.push(new Paper(-height/5*2.4, -height/5, height/5 *1.025, 4))\n  papers.push(new Paper(-height/5*3.45, -height/5, height/5, 5))\n  papers.push(new Paper(-height/5*4.5, -height/5, height/5, 6))\n \t\n\n}\n\n\n//hydra\n\nlet hc = document.createElement('canvas') // hydra canvas + custom size\nhc.width = 640\nhc.height = 360\nlet hydra = new Hydra({\n\tdetectAudio: false,\n\tcanvas: hc\n})\n\n\nlet pg\nnoise(100, 0.9)\n\t.pixelate()\n\t.colorama(0.2)\n\t//.color(120,80,70)\n\t.posterize(90, 0.6)\n\t.repeat(() => Math.sin(time) * 10)\n\t.scale(() => Math.sin(time) * 3)\n\t.kaleid(4)\n\t.hue(0.9)\n\t.blend(o1)\n\t.modulate(noise(2, 0))\n\t.out(o0)\n\nosc(20, 0.2, 20)\n\n\t.modulate(noise(2, 0))\n\t.out(o1)\n\nrender(o0)\n\n\n\n\nfunction draw() {\n\t//hydra \n\tpg.clear()\n\tpg.drawingContext.drawImage(hc, 0, 0, pg.width, pg.height)\n\ttexture(pg)\n\t\n\t\n\trectMode(CENTER)\n\t\n\t//drums hydra checkbox\npush()\n\tif(myButton13.checked()){\n\t\t\n\t\ttranslate(0, 0, -600)\n\t\tscale(width/1000, height/1000, 0)\n\t\trect(0, 0, width, height)\n\t\n\t\ttexture(pg)\n\t}else{\n\t\tbackground(0)\n\t}\n\t\n\t//papersheet loop and positioning\npop()\t\n\tpush()\n\trotateX(25)\n\trotateY(10)\n\trotateZ(120)\n\t\n\tfor(let p of papers){\n\t\tp.display() \n\t}\n\tpop()\n}\n\n\n\n//Midi stuff\nlet midiDeviceIn = \"VMini\" // [ID] or \"device name\"\nlet midiDeviceOut = 0 // [ID] or \"device name\"\nlet midiThru = false // optionally pass all in -> out\n\n\nlet midiInput, midiOutput, midiMsg = {}\n\n\n\nfunction noteOn(note) {\n\t// use note.type, .channel, .name, .number, .octave, .velocity\n\tlet x = map(note.number, 0, 128, -width, width)\n\tlet h = map(note.velocity, 0, 128, -width, width)\n\tpush()\n\tbackground(0)\n\tfill(note.velocity * 2)\n\trectMode(CENTER)\n\trect(x, 0, width / 128, h)\n\tpop()\n}\n\nfunction noteOff(note) {\n\t// use note.type, .channel, .name, .number, .octave, .velocity\n}\n\n\nfunction controlChange(control) {\n\t// use control.type, .channel, .controllerNumber, .controllerName, .value\nlet x = map(cos(frameCount / 1.2), -1, 1, -width, width)\n\tlet h = map(sin(frameCount / 0.01), -1, 1, -height, height)\n\t\n\tfill(random(255))\n\trectMode(CENTER)\n\trect(x, height / 2, width / 128, h)\n\tpop()\n}\n\nfunction midiToFreq(noteNumber) {\n\treturn 440 * Math.pow(2, (noteNumber - 69) / 12)\n}\n\n\n\n\nfunction sendNote(channel, note, octave, duration, velocity) {\n\tmidiOutput.playNote(note + octave, channel, {\n\t\tduration: duration,\n\t\tvelocity: parseFloat(velocity) / 127.0\n\t})\n}\n\nfunction parseMidi(mm) {\n\t//print(mm)\n\tif(mm.note != undefined) {\n\t\tswitch (mm.note.type) {\n\t\t\tcase 'noteon':\n\t\t\t\tnoteOn(mm.note)\n\t\t\t\tbreak;\n\t\t\tcase 'noteoff':\n\t\t\t\tnoteOff(mm.note)\n\t\t\t\tbreak;\n\t\t}\n\t} else if(mm.pitch != undefined) {\n\t\tpitchBend(mm.pitch)\n\t} else if(mm.control != undefined) {\n\t\tcontrolChange(mm.control)\n\t}\n}\n\nfunction setupMidi(idIn, idOut) {\n\tWebMidi.enable(function(err) {\n\t\tif(err) {\n\t\t\tconsole.log(\"WebMidi could not be enabled.\", err);\n\t\t}\n\n\t\t// Print to console available MIDI in/out id/names\n\t\tWebMidi.inputs.forEach(function(element, c) {\n\t\t\tprint(\"in  \\[\" + c + \"\\] \" + element.name)\n\t\t});\n\t\tWebMidi.outputs.forEach(function(element, c) {\n\t\t\tprint(\"out \\[\" + c + \"\\] \" + element.name)\n\t\t});\n\n\t\t// assign in channel:\n\t\tif(typeof idIn === 'number') {\n\t\t\tmidiInput = WebMidi.inputs[idIn]\n\t\t} else {\n\t\t\tmidiInput = WebMidi.getInputByName(idIn)\n\t\t}\n\n\t\tif(typeof idOut === 'number') {\n\t\t\tmidiOutput = WebMidi.outputs[idOut]\n\t\t} else {\n\t\t\tmidiOutput - WebMidi.getOutputByName(idOut)\n\t\t}\n\n\t\tmidiInput.addListener('midimessage', 'all', function(e) {\n\t\t\tif(midiThru) {\n\t\t\t\tif(e.data.length == 3) {\n\t\t\t\t\tmidiOutput.send(e.data[0], [e.data[1], e.data[2]])\n\t\t\t\t} else {\n\t\t\t\t\tmidiOutput.send(e.data[0])\n\t\t\t\t}\n\t\t\t}\n\t\t\tmidiMsg = {}\n\t\t\tmidiMsg.data = e.data\n\t\t\tmidiMsg.timestamp = e.timestamp\n\t\t\t// parseMidi(midiMsg) // optionally send raw only\n\t\t})\n\n\t\t// noteOn\n\t\tmidiInput.addListener('noteon', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteon'\n\t\t\t}\n\t\t\tnote.channel = e.channel\n\t\t\tnote.number = e.note.number\n\t\t\tnote.name = e.note.name\n\t\t\tnote.octave = e.note.octave\n\t\t\tnote.velocity = floor(127 * e.velocity)\n\n\t\t\tmidiMsg.note = note\n\t\t\tparseMidi(midiMsg)\n\t\t})\n\n\t\t// noteOff\n\t\tmidiInput.addListener('noteoff', \"all\", function(e) {\n\t\t\tlet note = {\n\t\t\t\ttype: 'noteoff'\n\t\t\t}\n\t\t\tnote.channel = e.channel\n\t\t\tnote.number = e.note.number\n\t\t\tnote.name = e.note.name\n\t\t\tnote.octave = e.note.octave\n\t\t\tnote.velocity = 0\n\n\t\t\tmidiMsg.note = note\n\t\t\tparseMidi(midiMsg)\n\t\t})\n\n\t\t// pitchBend\n\t\tmidiInput.addListener('pitchbend', \"all\", function(e) {\n\t\t\tlet pitch = {\n\t\t\t\ttype: 'pitchbend'\n\t\t\t}\n\t\t\tpitch.channel = e.channel\n\t\t\tpitch.value = floor(127 * e.value)\n\n\t\t\tmidiMsg.pitch = pitch\n\t\t\tparseMidi(midiMsg)\n\t\t})\n\n\t\t// controlChange\n\t\tmidiInput.addListener('controlchange', \"all\", function(e) {\n\t\t\tlet control = {\n\t\t\t\ttype: 'controlchange'\n\t\t\t}\n\t\t\tcontrol.channel = e.channel\n\t\t\tcontrol.controllerNumber = e.controller.number\n\t\t\tcontrol.controllerName = e.controller.name\n\t\t\tcontrol.value = e.value\n\n\t\t\tmidiMsg.control = control\n\t\t\tparseMidi(midiMsg)\n\t\t})\n\n\t})\n}\n\n\n\n\nfunction buildGUI() {\n\tguiHolder = createDiv('').class('gui-holder')\n\tguiBar = createDiv('FL STUDIO 2').parent(guiHolder).class('gui-bar').draggable(guiHolder)\n\tguiContent = createDiv('').parent(guiHolder).class('gui-content')\n\tcheckbox = createCheckbox('music mode').parent(guiBar).input(function() {\n\t\tif(checkbox.checked()) {\n\n\t\t\tguiButton.show()\n\t\t} else {\n\t\t\tguiButton.hide()\n\t\t}\n\t})\n\tguiButton = createDiv('').parent(guiContent).hide()\n\n\n\n\n\tmyButton = createButton('').parent(guiButton).class('myButton')\n\tmyButton.mousePressed(playSound)\n\n\n\tmyButton2 = createButton('').parent(guiButton).class('myButton')\n\tmyButton2.mousePressed(playSound2)\n\n\tmyButton3 = createButton('').parent(guiButton).class('myButton')\n\tmyButton3.mousePressed(playSound3)\n\n\tmyButton4 = createButton('').parent(guiButton).class('myButton')\n\tmyButton4.mousePressed(playSound4)\n\n\tmyButton5 = createButton('').parent(guiButton).class('myButton')\n\tmyButton5.mousePressed(playSound5)\n\n\tmyButton6 = createButton('').parent(guiButton).class('myButton')\n\tmyButton6.mousePressed(playSound6)\n\n\tmyButton7 = createButton('').parent(guiButton).class('myButton')\n\tmyButton7.mousePressed(playSound7)\n\n\tmyButton8 = createButton('').parent(guiButton).class('myButton')\n\tmyButton8.mousePressed(playSound8)\n\n\tmyButton9 = createButton('').parent(guiButton).class('myButton')\n\tmyButton9.mousePressed(playSound9)\n\n\tmyButton10 = createButton('').parent(guiButton).class('myButton')\n\tmyButton10.mousePressed(playSound10)\n\n\tmyButton11 = createButton('').parent(guiButton).class('myButton')\n\tmyButton11.mousePressed(playSound11)\n\n\tmyButton12 = createButton('').parent(guiButton).class('myButton')\n\tmyButton12.mousePressed(function(){\n\t\t\t//synth.triggerAttackRelease([\"f2\"], 1)\n\t})\n\n\tmyButton13 = createCheckbox('drums').parent(guiButton).class('myButton')\n\tmyButton13.mouseClicked(playSound13)\n\n\n\n\n\tcreateElement('style', `\n\t\n\t\t.gui-holder{\n\t\t\tposition: fixed;\n\t\t\ttop:25px;\n\t\t\tright:25px;\n\t\t\n\t\t\twidth: 300px;\n\t\t\theight: 200px;\n\t\t\topacity:100%;\n\t\t\tborder-radius:0% 0% 10% 10%;\n\t\t\tpadding:10px;\n\t\t\tfont-family:sans-serif;\n\t\t}\n\t\t\n\t\t\n\t\t.gui-bar{\n\t\t\tcolor: #fff;\n\t\t\tbackground:darkslategrey;\n\t\t\tborder-radius:20% 20% 0% 0%;\n\t\t\tpadding:10px;\n\t\t\topacity:50%;\n\t\t}\n\t\t.gui-bar:hover{\n\t\t\topacity:100%;\n\t\t}\n\t\t\n\t\n\t\t\n\t\t.myButton{\n\t\t\twidth: 50px;\n\t\t\theight: 50px;\n\t\t\tcolor: white;\n\t\t}\n\t\n\t`)\n}\n\n\n//button sound triggers\n\nfunction playSound() {\n\t//synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], 1)\n\n\t\n\n}\n\nfunction playSound2() {\n\t//synth.triggerAttackRelease([\"C#4\", \"f4\", \"A#4\"], 1)\n}\n\nfunction playSound3() {\n\t//synth.triggerAttackRelease([\"d4\", \"f#4\", \"b4\"], 1)\n}\n\nfunction playSound4() {\n\t//synth.triggerAttackRelease([\"d#4\", \"g4\", \"c5\"], 1)\n\tif(myButton4.mousePressed() === true){\n\t\t\n\t}\n}\n\nfunction playSound5() {\n\t//synth.triggerAttackRelease([\"e4\", \"g#4\", \"c#5\"], 1)\n\n}\n\nfunction playSound6() {\n\t//synth.triggerAttackRelease([\"f4\", \"a4\", \"d5\"], 1)\n\n}\n\nfunction playSound7() {\n\t//synth.triggerAttackRelease([\"c2\"], 1)\n\n}\n\nfunction playSound8() {\n\t//synth.triggerAttackRelease([\"c#2\"], 1)\n\n}\n\nfunction playSound9() {\n\t//synth.triggerAttackRelease([\"d2\"], 1)\n\n}\n\nfunction playSound10() {\n\t//synth.triggerAttackRelease([\"d#2\"], 1)\n\n}\n\nfunction playSound11() {\n\t//synth.triggerAttackRelease([\"e2\"], 1)\n\n}\n\nfunction playSound12() {\n\t//synth.triggerAttackRelease([\"f2\"], 1)\n\n}\n\nfunction playSound13() {\n\tif(myButton13.checked() === true) {\n\t\tplayer.start()\n\t\tplayer.loop = true\n\t\t\n\t} else {\n\t\tplayer.loop = false\n\t\tplayer.stop()\n\t}\n}\n\n//paper sheet class\n\nclass Paper{\n\tconstructor(x, y, s, var_random=0){\n\t\t\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.size = s\n\t\tthis.var_random = var_random\n\t\tthis.layer = createGraphics(s, s)\n\t\tthis.layer.background(255)\n\t\tthis.layer.fill(0)\n\t\tthis.layer.noStroke()\n\t\tthis.layer.rectMode(CENTER)\n\t\tthis.layer.angleMode(DEGREES)\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t//whole graph list\n\t\tthis.graph_list = [] //first = colone,  second = line\n\t\tlet m = 0\n\t\tfor(let i = 0; i < 6; i++){\n\t\t\tfor(let j = 0; j < 6; j++){\n\t\t\t\tthis.graph_list[m] = {x:i, y:j, rot:0}//[i , j] // \n\t\t\t\tm++\n\t\t\t}\n\t\t}\n\t\t\n\t\t//makes a list of exceptions and takes out the exceptions out of graph_list\n\t\tthis.big_list = [] // first = line, second = colone\n\t\tlet rand_big_list\n\t\tfor(let i = 0; i < this.var_random; i++){\n\t\t\trand_big_list = floor(random(this.graph_list.length )) \n\t\t\tthis.big_list[i] = this.graph_list[rand_big_list]\n\t\t\t//this.graph_list.splice(rand_big_list, 1)\n\t\t\tthis.graph_list[rand_big_list].rot = 90\n\t\t}\n\t\n\t}\n\tdisplay(){\n\t\tthis.layer.push()\n\t\tthis.layer.fill(0)\n\t\t// this.layer.stroke(255, 0, 0)\n\t\t\tfor(let j = 0; j < this.graph_list.length; j++) {\n\t\t\t\tthis.layer.push()\n\t\t\t\tthis.layer.translate((this.size/7) + this.graph_list[j].x*(this.size/7),(this.size/7) + this.graph_list[j].y*(this.size/7))\n\t\t\t\tthis.layer.rotate(this.graph_list[j].rot)\n\t\t\t\tthis.layer.rect(0, 0, this.size/25, this.size/6)\n\t\t\t\tthis.layer.pop()\n\t\t\t}\n\tthis.layer.pop()\n\tpush()\n\ttranslate(this.x, this.y)\n\timage(this.layer, 0, 0)\n\n\tpop()\t\t\n\t\t\n\t}\n}\n\n\n//keypress audio trigger\n\nfunction keyPressed(){\n\t r = random(255)\n\t g = random(100,200)\n     b = random(100)\n     a = random(200,255)\n  if(checkbox.checked()){ \n    \n  \n  \n  \n\tif(key == 'a'){\n\t\t//synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], 1)\n\t\t\n\t}else{\n\t\tfill(255)\n\t}\n\t\n\tif(key == 's'){\n\t\t//synth.triggerAttackRelease([\"C#4\", \"f4\", \"A#4\"], 1)\n\t\tfill(r, g, b)\n\t\t\n\t}else{\n\t\tfill(255)\n\t}\n\tif(key == 'd'){\n\t\t//synth.triggerAttackRelease([\"d4\", \"f#4\", \"b4\"], 1)\n\t\tfill(r, g, b)\n\t\t\n\t}else{\n\t\tfill(255)\n\t}\n\t\n\tif(key == 'f'){\n\t\t//synth.triggerAttackRelease([\"d#4\", \"g4\", \"c5\"], 1)\n\t\tfill(r, g, b)\n\t\t\n\t}else{\n\t\tfill(255)\n\t}\n\t\n\tif(key == 'g'){\n\t\t//synth.triggerAttackRelease([\"e4\", \"g#4\", \"c#5\"], 1)\n\t\tfill(r, g, b)\n\t\t\n\t}else{\n\t\tfill(255)\n\t}\n\t\n\tif(key == 'y'){\n\t\t//synth.triggerAttackRelease(\"c3\", \"8n\")\n\t\tfill(r, g, b)\n\t\n\t\t\n\t}\n\t\n\tif(key == 'x'){\n\t\t//synth.triggerAttackRelease(\"c#3\", \"8n\")\n\t\tfill(r, g, b)\n\t\n\t\t\n\t}\n\t\n\tif(key == 'c'){\n\t\t//synth.triggerAttackRelease(\"d3\", \"8n\")\n\t\tfill(r, g, b)\n\t\n\t\t\n\t}\n\t\n\t\n}\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
    }
  ]
}