{
  "version": "1.4.1",
  "revision": 44,
  "count": {
    "sketches": 1,
    "folders": 0
  },
  "structure": [
    {
      "type": "sketch",
      "name": "CC_VERAMOLNAR_3D_12",
      "mod": 1704808298296,
      "parent": "CC_veraMolnar_3D",
      "code": "let credits = { \n    \"student_names\": \"anna rieder, olivier wick, nik kramarenko\", \n    \"recode_title\": \"variations\", \n    \"recode_year\": 1970, \n    \"recode_medium\": \"plotter drawing in ink on paper\", \n    \"recode_url\": \"http://dada.compart-bremen.de/item/artwork/1291\" \n} \n\nlet shapes = []\nlet coords = []\nlet grid = 14\nlet xmultiplier = 50\nlet startPos\nlet showGui = true\n\nlet activeOrbit = false, activeRotate = false\n\nfunction setup() {\n\tcreateCanvas(windowWidth, windowHeight, WEBGL)\n\t\n\tbuildGUI()\n\t\n\tstartPos = windowWidth/2 - grid/2 * xmultiplier //calc start position for first column\n\t\n\tbuildGrid()\n}\n\nfunction buildGrid(){\n\tshapes = []\n\tcoords = []\n\t// angleMode(RADIANS)\n\t// rotate(0)\n\tfor (var i = 0; i < grid; i++) { //array with all the 196 coords\n\t\tfor (var j = 0; j < grid; j++) {\n\t\t\tcoords.push(createVector(i*xmultiplier, j*xmultiplier)) //can introduce ymultiplier if they should be different - for tweaking\n\t\t\t// print(coords)\n\t\t}\n\t}\n\t//put new quads in grid positions\n\tfor (var i = 0; i < coords.length; i++) { //length - 1 ? dont think so\n\t\t//better have a translate at some point instead of width/2 and -height/2 +40...\n\t\tshapes.push(new Quad(coords[i].x + startPos-(width/2), coords[i].y + 40-height/2, random(-200, 200), 50, 30, 3)) //new quad with the coords from array + startpos and 50, z, quadwidth, quadheight and strokeweight\n\t}\n}\n\nfunction draw() {\n\t\n\t//if perspective checked, perspective, else: ortho\n\tif(togglePerspective.checked()){\n\t\tangleMode(RADIANS)\n\t\tlet eyeZ = ((height/2) / tan(PI/6))\n\t\tperspective(PI/3, width/height, eyeZ/10, eyeZ*10)\n\t}else{\n\t\tortho()\n\t}\n\t\n\t//movement is in display()\n\t\n\t//if orbit checked, orbitControl, if rotate was checked, make it false but update activeRotate (why to true?)\n\tif(toggleOrbit.checked()){\n\t\torbitControl()\n\t\tif(toggleRotate.checked()){\n\t\t\tactiveRotate = true\n\t\t\ttoggleRotate.checked(false)\n\t\t}\n\t}\n\t\n\t//if rotate checked\n\tif(toggleRotate.checked()){\n\t\tangleMode(DEGREES)\n\t\trotateY(frameCount)\n\t\tif(toggleOrbit.checked()){\n\t\t\tactiveOrbit = true\n\t\t\ttoggleOrbit.checked(false)\n\t\t}\n\t}\n\telse{\n\t\tangleMode(RADIANS)\n\t\trotateY(0) // here reset for rotation \n\t}\n\t\n\t//basic graphics\n\tbackground(240)\n\tstroke(0)\n\tnoFill()\n\t\n\t\n\t//the interactive stuff (blueprint)\n\tfor (let shape of shapes) { \n\t\t// stroke(sliderChange.value())\n\t\tif(dist(mouseX, mouseY, shape.x + width/2, shape.y + height/2) < shape.quadWidth+20){ //-50 is best for single one, +50 for bigger reach\n\t\t\t// shape.quadHeight = 30 //or -= 5\n\t\t\tshape.strokeWeight = 10\n\t\t\t// shape.quadWidth = 100\n\t\t\tshape.coords[0].x = sin(frameCount*.5%5)*5\n\t\t\tshape.coords[2].x = sin(frameCount*.5%50)*5\n\t\t\tif(toggleFun.checked()){\n\t\t\tshape.coords[0].y -= 1\n\t\t\t}\n\t\t}else{\n\t\t\t// shape.quadHeight =50\n\t\t\tif(shape.strokeWeight > 3){\n\t\t\tshape.strokeWeight -= .1 //i want it to gradually wear off :)\n\t\t\t}\n\t\t}\n\t\t// shape.coords[0].x = shape.coords[0].x \n\t\t// print(shape.quadWidth)\n\t\t// print(sliderChange.value())\n\t\t// shape.quadWidth = sliderChange.value();\n\t\tshape.display() //display the quad!\n\t}\n}\n\nfunction toggleGui(){\n\tshowGui = !showGui\n\tguiContent.style('display', showGui ? 'block' : 'none');\n\tguiButton.html(showGui ? '^' : 'v'); //these two lines chatgpt\n}\n\n//class definition with constructor (coords array 2) & display() function\nclass Quad{ \n\tconstructor(_x, _y, _z, _quadWidth, _quadHeight, _strokeWeight){\n\t\tthis.x = _x\n\t\tthis.y = _y\n\t\tthis.z = _z\n\t\tthis.quadWidth = _quadWidth\n\t\tthis.quadHeight = _quadHeight\n\t\tthis.strokeWeight = _strokeWeight\n\t\tthis.frameCount = floor(random(999)) //so every object starts somewhere else\n\t\t\n\t\t//saves cornerpoints of each quad\n\t\tthis.coords = []\n\t\tfor (var i = 0; i < 4; i++) {\n\t\t\tlet cy = 0\n\t\t\tif(i > 1){\n\t\t\t\tcy = this.quadHeight\n\t\t\t}\n\t\t\tthis.coords.push(createVector(random(-this.quadWidth, this.quadWidth), cy, this.z)) //cy first two times 0, then quadHeight\n\t\t}\n\t}\n\t\n\t//own function (for making the shape + vertices)\n\tdisplay(){ \n\t\tthis.frameCount++\n\t\tstrokeWeight(this.strokeWeight)\n\t\t\n\t\tpush()\n\t\tif(toggleMovement.checked()){\n\t\t\ttranslate(this.x, this.y, this.frameCount*10%500)\n\t\t\t// rotateY(1)\n\t\t}\n\t\telse{\n\t\t\ttranslate(this.x, this.y, this.z)\n\t\t}\n\t\tbeginShape()\n\t\tfor (var i = 0; i < this.coords.length; i++) {\n\t\t\tvertex(this.coords[i].x * sliderChange.value(), this.coords[i].y, this.coords[i].z) // <----------\n\t\t}\n\t\tendShape(CLOSE)\n\t\tpop()\n\t}\n}\n\n//gui with html and css (for sliders, checkboxes, buttons)\nfunction buildGUI(){\n\tguiHolder = createDiv('').class('gui-holder')\n\t\n\tguiBar = createDiv('VARIATIONS').parent(guiHolder).class('gui-bar').draggable(guiHolder)\n\tguiButton = createButton('^').parent(guiBar).mousePressed(toggleGui).class('gui-button')\n\t// if(showGui){\n\t// }\n\tguiContent = createDiv('').parent(guiHolder).class('gui-content')\n\t\n\t//checkbox perspective\n\tguiItem = createDiv('').parent(guiContent).class('gui-item') //guiItem used several times and overwritten\n\tcreateDiv('PERSPECTIVE').parent(guiItem).class('gui-label')\n\ttogglePerspective = createCheckbox('', false).parent(guiItem).class('checkbox')\n\t\n\t//checkbox toggleMovement \n\tguiItem = createDiv('').parent(guiContent).class('gui-item') \n\tcreateDiv('MOVEMENT').parent(guiItem).class('gui-label')\n\ttoggleMovement = createCheckbox('', false).parent(guiItem).class('checkbox')\n\t\n\t//checkbox orbitControl \n\tguiItem = createDiv('').parent(guiContent).class('gui-item') \n\tcreateDiv('3D ORBIT').parent(guiItem).class('gui-label')\n\ttoggleOrbit = createCheckbox('', false).parent(guiItem).class('checkbox')\n\t\n\t//checkbox rotate\n\tguiItem = createDiv('').parent(guiContent).class('gui-item') \n\tcreateDiv('ROTATE').parent(guiItem).class('gui-label')\n\ttoggleRotate = createCheckbox('', false).parent(guiItem).class('checkbox').input(function (){\n\t\tif(!toggleRotate.checked()){\n\t\t\tif(activeOrbit){\n\t\t\t\ttoggleOrbit.checked(true)\n\t\t\t}\n\t\t}else{\n\t\t\ttoggleOrbit.checked(false)\n\t\t}\n\t})\n\t\n\t//slider change\n\tguiItem = createDiv('').parent(guiContent).class('gui-item')\n\tcreateDiv('WIDTH').parent(guiItem).class('gui-label')\n\tsliderChange = createSlider(0, 10, 1, .01).parent(guiItem).class('gui-slider')\n\t\n\t//checkbox fun corner points going up\n\tguiItem = createDiv('').parent(guiContent).class('gui-item') \n\tcreateDiv('FUN').parent(guiItem).class('gui-label')\n\ttoggleFun = createCheckbox('', false).parent(guiItem).class('checkbox')\n\t\n\tguiItem = createDiv('').parent(guiContent).class('gui-item') \n\tcreateButton('RESET').parent(guiItem).mousePressed(function(){\n\t\ttogglePerspective.checked(false)\n\t\ttoggleMovement.checked(false)\n\t\ttoggleOrbit.checked(false)\n\t\ttoggleRotate.checked(false)\n\t\tsliderChange.value(1)\n\t\ttoggleFun.checked(false)\n\t\tcamera()\n\t\tbuildGrid()\n\t})\n\tcreateButton('RANDOM').parent(guiItem).mousePressed(function(){\n\t\ttogglePerspective.checked(round(random(1))) //random true or false, doesn't work\n\t\ttoggleMovement.checked(round(random(1)))\n\t\ttoggleOrbit.checked(round(random(1)))\n\t\ttoggleRotate.checked(round(random(1)))\n\t\tsliderChange.value(random(0,10))\n\t\ttoggleFun.checked(round(random(1)))\n\t\tcamera()\n\t\tbuildGrid()\n\t\t\n\t})\n\t\n\tcreateElement('style', `\n\t\t.gui-holder{\n\t\t\tposition:fixed;\n\t\t\tright:150px;\n\t\t\tbottom:350px;\n\t\t\tbackground:rgba(255, 255, 255, .5);\n\t\t\twidth:200px;\n\t\t\theight:32px;\n\t\t\tcolor:blue;\n\t\t\tborder:5px outset grey;\n\t\t\tfont-family:arial;\n\t\t\tborder-radius: 15px;\n\t\t}\n\t\t.gui-bar{\n\t\t\tcolor:blue;\n\t\t\tborder-bottom:1px solid grey;\n\t\t\tpadding:5px;\n\t\t}\n\t\t.gui-button{\n\t\t\t// right:5px;\n\t\t\tmargin-left:70px\n\t\t}\n\t\t\n\t\t.gui-content{\n\t\t\twidth:100%;\n\t\t\theight:100%;\n\t\t\tbackground:rgba(255, 255, 255, .5);\n\t\t\twidth:200px;\n\t\t\theight:335px;\n\t\t\tcolor:blue; //these lines for gui-content are copied from gui-holder, so it's not elegant\n\t\t\tfont-family:arial;\n\t\t\t// border:5px outset grey; // <------------------ !\n\t\t\tborder-radius: 15px;\n\t\t}\n\t\t.gui-slider{\n\t\t\twidth:95%;\n\t\t}\n\t\t.gui-label{\n\t\t\t\n\t\t\t\n\t\t}\n\t\t.gui-item{\n\t\t\tborder-bottom:1px solid grey;\n\t\t\t// margin-bottom:15px;\n\t\t\tpadding:5px;\n\t\t}\n\t\t.gui-item:hover{\n\t\t\tbackground:grey;\n\t\t\t\n\t\t}\n\t\n\t`)\n}"
    }
  ]
}